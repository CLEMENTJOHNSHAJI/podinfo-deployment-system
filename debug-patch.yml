# Add this debugging code to the Deploy EC2 application step
# Replace the existing step with this enhanced version

      - name: Deploy EC2 application
        run: |
          # Diagnostic: Print caller identity and region
          echo "=== DIAGNOSTIC INFORMATION ==="
          echo "Caller identity:"
          aws sts get-caller-identity
          echo "Region: $AWS_REGION"
          echo "==============================="
          
          # Get the latest Auto Scaling Group instances
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(AutoScalingGroupName, `podinfo`)].AutoScalingGroupName' --output text)
          echo "Auto Scaling Group Name: $ASG_NAME"
          
          # Create user data script
          cat > user_data.sh << 'EOF'
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          
          # Install CloudWatch agent
          yum install -y amazon-cloudwatch-agent
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          # Pull and run the new image
          docker pull ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ steps.get-digests.outputs.ec2_digest }}
          docker stop podinfo || true
          docker rm podinfo || true
          docker run -d --name podinfo -p 8080:8080 ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ steps.get-digests.outputs.ec2_digest }}
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:AmazonCloudWatch-linux -s
          EOF
          
          # Encode user data to base64
          USER_DATA_B64=$(base64 -w 0 user_data.sh)
          
          # Create a new Launch Template with updated user data
          echo "Creating new Launch Template..."
          NEW_LAUNCH_TEMPLATE_ID=$(aws ec2 create-launch-template \
            --launch-template-name podinfo-github-actions-$(date +%s) \
            --launch-template-data "UserData=$USER_DATA_B64,ImageId=ami-0e6af742d565ff61c,InstanceType=t3.micro,SecurityGroupIds=sg-0c0ae6c0c58040f61" \
            --query 'LaunchTemplate.LaunchTemplateId' --output text) || {
            echo "create-launch-template failed"; 
            aws ec2 describe-launch-templates --filters Name=launch-template-name,Values="podinfo-github-actions*" || true; 
            exit 1;
          }
          
          echo "New launch template id: $NEW_LAUNCH_TEMPLATE_ID"
          if [ -z "$NEW_LAUNCH_TEMPLATE_ID" ]; then
            echo "Launch template creation did not return an id â€” aborting"; 
            exit 1
          fi
          
          # Verify the launch template was created successfully
          echo "Verifying launch template creation..."
          aws ec2 describe-launch-templates --launch-template-ids $NEW_LAUNCH_TEMPLATE_ID --output json
          
          # Make sure ASG name resolved
          if [ -z "$ASG_NAME" ]; then
            echo "AutoScalingGroup not found; aborting"; 
            exit 1
          fi
          
          # Now update ASG
          echo "Updating Auto Scaling Group to use new Launch Template..."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "$ASG_NAME" \
            --launch-template LaunchTemplateId="$NEW_LAUNCH_TEMPLATE_ID",Version='$Latest'
