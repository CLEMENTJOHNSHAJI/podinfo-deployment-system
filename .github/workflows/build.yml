name: Build, Sign, and SBOM

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-sign:
    name: Build and Sign Container Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      security-events: write
    outputs:
      ec2_digest: ${{ steps.build-ec2.outputs.digest }}
      lambda_digest: ${{ steps.build-lambda.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Lambda image
        id: build-lambda
        run: |
          # Build the image
          docker build -t ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }} -t ${{ secrets.ECR_REPOSITORY_LAMBDA }}:latest ./app
          
          # Push the image
          docker push ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.ECR_REPOSITORY_LAMBDA }}:latest
          
          # Get the image digest
          DIGEST=$(docker inspect ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }} --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
      
      - name: Sign Lambda image
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          # Install cosign
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          
          # Sign the image using digest for consistency
          echo "Signing Lambda image: ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ steps.build-lambda.outputs.digest }}"
          cosign sign --yes ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ steps.build-lambda.outputs.digest }}
          echo "Lambda image signed successfully"
      
      - name: Generate SBOM for Lambda image
        run: |
          # Install syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Generate SBOM
          syft ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }} -o spdx-json > lambda-sbom.json
          
          # Store SBOM as artifact (not as ECR image)
          echo "SBOM generated for Lambda image"
      
      - name: Build and push EC2 image
        id: build-ec2
        run: |
          # Build the image
          docker build -t ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }} -t ${{ secrets.ECR_REPOSITORY_EC2 }}:latest ./app
          
          # Push the image
          docker push ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.ECR_REPOSITORY_EC2 }}:latest
          
          # Get the image digest
          DIGEST=$(docker inspect ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }} --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
      
      - name: Sign EC2 image
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          # Sign the image using digest for consistency
          echo "Signing EC2 image: ${{ secrets.ECR_REPOSITORY_EC2 }}@${{ steps.build-ec2.outputs.digest }}"
          cosign sign --yes ${{ secrets.ECR_REPOSITORY_EC2 }}@${{ steps.build-ec2.outputs.digest }}
          echo "EC2 image signed successfully"
      
      - name: Generate SBOM for EC2 image
        run: |
          # Generate SBOM
          syft ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }} -o spdx-json > ec2-sbom.json
          
          # Store SBOM as artifact (not as ECR image)
          echo "SBOM generated for EC2 image"
      
      - name: Upload SBOM to ECR
        run: |
          EC2_REPO_NAME=$(echo "${{ secrets.ECR_REPOSITORY_EC2 }}" | awk -F'/' '{print $2}')
          LAMBDA_REPO_NAME=$(echo "${{ secrets.ECR_REPOSITORY_LAMBDA }}" | awk -F'/' '{print $2}')
          aws ecr put-image-scanning-configuration \
            --repository-name "$EC2_REPO_NAME" \
            --image-scanning-configuration scanOnPush=true
          aws ecr put-image-scanning-configuration \
            --repository-name "$LAMBDA_REPO_NAME" \
            --image-scanning-configuration scanOnPush=true
      
      
      - name: Require signatures before deploy (policy gate)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "Verifying EC2 image signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.+" \
            ${{ secrets.ECR_REPOSITORY_EC2 }}@${{ steps.build-ec2.outputs.digest }}
          echo "✅ EC2 signature verified"
          
          echo "Verifying Lambda image signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.+" \
            ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ steps.build-lambda.outputs.digest }}
          echo "✅ Lambda signature verified"
      
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            lambda-sbom.json
            ec2-sbom.json
      
      - name: Security scan EC2 image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-ec2-results.sarif'
      
      - name: Security scan Lambda image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-lambda-results.sarif'
      
      - name: Upload EC2 Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-ec2-results.sarif
          category: 'trivy-ec2'
      
      - name: Upload Lambda Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-lambda-results.sarif
          category: 'trivy-lambda'