name: Build, Sign, and SBOM

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-sign:
    name: Build and Sign Container Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      security-events: write
    outputs:
      ec2_digest: ${{ steps.build-ec2.outputs.digest }}
      lambda_digest: ${{ steps.build-lambda.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Lambda image
        id: build-lambda
        uses: docker/build-push-action@v5
        with:
          context: ./app
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }}
            ${{ secrets.ECR_REPOSITORY_LAMBDA }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push EC2 image
        id: build-ec2
        uses: docker/build-push-action@v5
        with:
          context: ./app
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }}
            ${{ secrets.ECR_REPOSITORY_EC2 }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }}
          format: spdx-json
          output-file: sbom-podinfo.json
      
      - name: Generate SBOM for Lambda
        uses: anchore/sbom-action@v0
        with:
          image: ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }}
          format: spdx-json
          output-file: sbom-podinfo-lambda.json
      
      - name: Upload SBOM to ECR
        run: |
          EC2_REPO_NAME=$(echo "${{ secrets.ECR_REPOSITORY_EC2 }}" | awk -F'/' '{print $2}')
          LAMBDA_REPO_NAME=$(echo "${{ secrets.ECR_REPOSITORY_LAMBDA }}" | awk -F'/' '{print $2}')
          aws ecr put-image-scanning-configuration \
            --repository-name "$EC2_REPO_NAME" \
            --image-scanning-configuration scanOnPush=true
          aws ecr put-image-scanning-configuration \
            --repository-name "$LAMBDA_REPO_NAME" \
            --image-scanning-configuration scanOnPush=true
      
      - name: Sign container image
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'
      
      - name: Sign Podinfo image
        run: |
          cosign sign --yes ${{ secrets.ECR_REPOSITORY_EC2 }}@${{ steps.build-ec2.outputs.digest }}
      
      - name: Sign Lambda image
        run: |
          cosign sign --yes ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ steps.build-lambda.outputs.digest }}

      - name: Require signatures before deploy (policy gate)
        run: |
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.+" \
            ${{ secrets.ECR_REPOSITORY_EC2 }}@${{ steps.build-ec2.outputs.digest }}
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.+" \
            ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ steps.build-lambda.outputs.digest }}
      
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            sbom-podinfo.json
            sbom-podinfo-lambda.json
      
      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'