name: Build, Sign, and Deploy Podinfo

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
  IMAGE_TAG: ${{ github.sha }}
  ENABLE_CODEDEPLOY: ${{ secrets.ENABLE_CODEDEPLOY || 'false' }}

jobs:
  build-and-sign:
    name: Build and Sign Container Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Lambda image
        id: build-lambda
        uses: docker/build-push-action@v5
        with:
          context: ./app
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }}
            ${{ secrets.ECR_REPOSITORY_LAMBDA }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push EC2 image
        id: build-ec2
        uses: docker/build-push-action@v5
        with:
          context: ./app
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }}
            ${{ secrets.ECR_REPOSITORY_EC2 }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }}
          format: spdx-json
          output-file: sbom-podinfo.json
      
      - name: Generate SBOM for Lambda
        uses: anchore/sbom-action@v0
        with:
          image: ${{ secrets.ECR_REPOSITORY_LAMBDA }}:${{ env.IMAGE_TAG }}
          format: spdx-json
          output-file: sbom-podinfo-lambda.json
      
      - name: Upload SBOM to ECR
        run: |
          aws ecr put-image-scanning-configuration \
            --repository-name podinfo \
            --image-scanning-configuration scanOnPush=true
          
          aws ecr put-image-scanning-configuration \
            --repository-name podinfo-lambda \
            --image-scanning-configuration scanOnPush=true
      
      - name: Sign container image
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'
      
      - name: Sign Podinfo image
        run: |
          cosign sign --yes ${{ secrets.ECR_REPOSITORY_EC2 }}@${{ steps.build-ec2.outputs.digest }}
      
      - name: Sign Lambda image
        run: |
          cosign sign --yes ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ steps.build-lambda.outputs.digest }}

      - name: Require signatures before deploy (policy gate)
        run: |
          cosign verify ${{ secrets.ECR_REPOSITORY_EC2 }}@${{ steps.build-ec2.outputs.digest }}
          cosign verify ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ steps.build-lambda.outputs.digest }}
      
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            sbom-podinfo.json
            sbom-podinfo-lambda.json
      
      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.ECR_REPOSITORY_EC2 }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-sign
    if: github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Lambda function (by digest)
        run: |
          aws lambda update-function-code \
            --function-name podinfo-lambda \
            --image-uri ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ needs.build-and-sign.outputs.lambda_digest || steps.build-lambda.outputs.digest }}
          
          aws lambda publish-version \
            --function-name podinfo-lambda \
            --description "Deployment ${{ github.sha }}"
      
      - name: Deploy Lambda with CodeDeploy
        if: env.ENABLE_CODEDEPLOY == 'true'
        run: |
          aws codedeploy create-deployment \
            --application-name podinfo-lambda-deploy \
            --deployment-group-name podinfo-lambda-group \
            --deployment-config-name CodeDeployDefault.LambdaCanary10Percent5Minutes \
            --description "Deploy ${{ github.sha }} to Lambda"
      
      - name: Deploy EC2 with CodeDeploy
        if: env.ENABLE_CODEDEPLOY == 'true'
        run: |
          aws codedeploy create-deployment \
            --application-name podinfo-ec2-deploy \
            --deployment-group-name podinfo-ec2-group \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --description "Deploy ${{ github.sha }} to EC2"
      
      - name: Wait for deployments
        run: |
          echo "Waiting for deployments to complete..."
          sleep 300
      
      - name: Run smoke tests
        run: |
          # Test Lambda endpoint
          LAMBDA_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`podinfo-api`].ApiEndpoint' --output text)
          curl -f $LAMBDA_URL/healthz || exit 1
          
          # Test ALB endpoint
          ALB_DNS=$(aws elbv2 describe-load-balancers --names podinfo-alb --query 'LoadBalancers[0].DNSName' --output text)
          curl -f http://$ALB_DNS/healthz || exit 1
      
      - name: Run synthetic tests
        run: |
          # Synthetic test script
          ./scripts/synthetic-tests.sh dev
      
      - name: Update deployment status
        run: |
          echo "Deployment to dev environment completed successfully"
          echo "Image digest: ${{ env.IMAGE_TAG }}"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-sign, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Verify image signature
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'
      
      - name: Verify Podinfo image signature
        run: |
          cosign verify ${{ secrets.ECR_REPOSITORY_EC2 }}@${{ needs.build-and-sign.outputs.ec2_digest || steps.build-ec2.outputs.digest }}
      
      - name: Verify Lambda image signature
        run: |
          cosign verify ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ needs.build-and-sign.outputs.lambda_digest || steps.build-lambda.outputs.digest }}
      
      - name: Deploy Lambda function (by digest)
        run: |
          aws lambda update-function-code \
            --function-name podinfo-lambda \
            --image-uri ${{ secrets.ECR_REPOSITORY_LAMBDA }}@${{ needs.build-and-sign.outputs.lambda_digest || steps.build-lambda.outputs.digest }}
          
          aws lambda publish-version \
            --function-name podinfo-lambda \
            --description "Production deployment ${{ github.sha }}"
      
      - name: Deploy Lambda with CodeDeploy
        if: env.ENABLE_CODEDEPLOY == 'true'
        run: |
          aws codedeploy create-deployment \
            --application-name podinfo-lambda-deploy \
            --deployment-group-name podinfo-lambda-group \
            --deployment-config-name CodeDeployDefault.LambdaCanary10Percent5Minutes \
            --description "Production deploy ${{ github.sha }} to Lambda"
      
      - name: Deploy EC2 with CodeDeploy
        if: env.ENABLE_CODEDEPLOY == 'true'
        run: |
          aws codedeploy create-deployment \
            --application-name podinfo-ec2-deploy \
            --deployment-group-name podinfo-ec2-group \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --description "Production deploy ${{ github.sha }} to EC2"
      
      - name: Wait for deployments
        run: |
          echo "Waiting for production deployments to complete..."
          sleep 300
      
      - name: Run production smoke tests
        run: |
          # Test Lambda endpoint
          LAMBDA_URL=$(aws apigatewayv2 get-apis --query 'Items[?Name==`podinfo-api`].ApiEndpoint' --output text)
          curl -f $LAMBDA_URL/healthz || exit 1
          
          # Test ALB endpoint
          ALB_DNS=$(aws elbv2 describe-load-balancers --names podinfo-alb --query 'LoadBalancers[0].DNSName' --output text)
          curl -f http://$ALB_DNS/healthz || exit 1
      
      - name: Run production synthetic tests
        run: |
          ./scripts/synthetic-tests.sh prod
      
      - name: Update production status
        run: |
          echo "Production deployment completed successfully"
          echo "Image digest: ${{ env.IMAGE_TAG }}"
          echo "Deployment timestamp: $(date -u)"
